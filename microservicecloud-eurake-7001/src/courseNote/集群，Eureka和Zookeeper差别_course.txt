分布式是指将不同的业务分布在不同的地方。 而集群指的是将几台服务器集中在一起，实现同一业务。


为了方便 区分 不让所有的域名都是localhost 进行域名配置修改
	找到C:\Windows\System32\drivers\etc 下面的hosts文件
	直接在hosts文件夹下面添加127.0.0.1     www.111.com 就可以了 启动一个tomcat项目就可以测试成功
	
	
CAP  原则又称CAP定理，指的是在一个分布式系统中，Consistency（一致性）、 Availability（可用性）、
	 Partition tolerance（分区容错性），三者不可兼得  没有nosql数据库能满足这三个条件
	 
	 分布式系统的CAP理论：理论首先把分布式系统中的三个特性进行了如下归纳：
	　　   ● 一致性（C）：在分布式系统中的所有数据备份，在同一时刻是否同样的值。（等同于所有节点访问同一份最新的数据副本）
		● 可用性（A）：在集群中一部分节点故障后，集群整体是否还能响应客户端的读写请求。（对数据更新具备高可用性）
		● 分区容错性（P）：以实际效果而言，分区相当于对通信的时限要求。系统如果不能在时限内达成数据一致性，就意
		      味着发生了分区的情况，必须就当前操作在C和A之间做出选择。


RDBNS (mysql/oracle/sqlServer)  ==>> ACID  ==>> 传统的关系数据库
	 ACID，指数据库事务正确执行的四个基本要素的缩写。包含：原子性（Atomicity）、一致性（Consistency）、
	 隔离性（Isolation）、持久性（Durability）。一个支持事务（Transaction）的数据库，
	 必须要具有这四种特性，否则在事务过程（Transaction processing）当中无法保证数据的正确性，
	 交易过程极可能达不到交易方的要求。
	 
	 原子性编辑
		整个事务中的所有操作，要么全部完成，要么全部不完成，不可能停滞在中间某个环节。事务在执行过程中发生错误，
		会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。

	一致性编辑
		一个事务可以封装状态改变（除非它是一个只读的）。事务必须始终保持系统处于一致的状态，不管在任何给定的时间并发事务有多少。
		也就是说：如果事务是并发多个，系统也必须如同串行事务一样操作。其主要特征是保护性和不变性(Preserving an Invariant)，以转账案例为例，假设有五个账户，每个账户余额是100元，那么五个账户总额是500元，如果在这个5个账户之间同时发生多个转账，无论并发多少个，比如在A与B账户之间转账5元，在C与D账户之间转账10元，在B与E之间转账15元，五个账户总额也应该还是500元，这就是保护性和不变性。

	隔离性编辑
		隔离状态执行事务，使它们好像是系统在给定时间内执行的唯一操作。如果有两个事务，运行在相同的时间内，执行相同的功能，事务的隔离性将确保每一事务在系统中认为只有该事务在使用系统。这种属性有时称为串行化，为了防止事务操作间的混淆，必须串行化或序列化请求，使得在同一时间仅有一个请求用于同一数据。

	持久性编辑
		在事务完成以后，该事务对数据库所作的更改便持久的保存在数据库之中，并不会被回滚。
		
		由于一项操作通常会包含许多子操作，而这些子操作可能会因为硬件的损坏或其他因素产生问题，要正确实现ACID并不容
		易。ACID建议数据库将所有需要更新以及修改的资料一次操作完毕，但实际上并不可行。
		
		目前主要有两种方式实现ACID：第一种是Write ahead logging，也就是日志式的方式(现代数据库均基于这种方式)。第二种是Shadow paging。
		
		相对于WAL（write ahead logging）技术，shadow paging技术实现起来比较简单，消除了写日志记录的开销恢复的速度也快(不需要redo和undo)。shadow paging的缺点就是事务提交时要输出多个块，这使得提交的开销很大，而且以块为单位，
		很难应用到允许多个事务并发执行的情况——这是它致命的缺点。
		
		WAL 的中心思想是对数据文件 的修改（它们是表和索引的载体）必须是只能发生在这些修改已经 记录了日志之后 -- 也就是说，在日志记录冲刷到永久存储器之后． 如果我们遵循这个过程，那么我们就不需要在每次事务提交的时候 都把数据页冲刷到磁盘，因为我们知道在出现崩溃的情况下，
		 我们可以用日志来恢复数据库：任何尚未附加到数据页的记录 都将先从
		 日志记录中重做（这叫向前滚动恢复，也叫做 REDO） 然后那些未提交的事务做的修改将被从数据页中删除 （这叫向后滚动恢复 - UNDO）。


作为服务注册中心、Eureka比Zookeeper好在那里
 	著名的CAP理论指出，一个分布式系统不可能同时满足C(一致性)、A（可用性）、p(分区容错性)。由于分区容错性P在是分布式系统中必须要保证的，
 	因此我们只能在A和C之间进行权衡
	
	Zookeeper保证的是CP
		当向注册中心查询服务列表时，我们可以容忍注册中心返回的是几分钟以前的注册信息，但不能接受服务直接down掉不可用，
		也就是说，服务注册功能对可用性的要求要高于一致性。但是zk会出现这一种情况，当master节点因为网络故障与其他
		节点失去联系时，剩余节点会重新进行leader选举，问题在于，选举leader的时间过长，30-120s，且选举期间整个
		zk集群都是不可用的这就导致在选举期间注册服务瘫痪，在云部署的环境下，因网络问题时的zk集群失去master节点是较大
		概率会发生的事，虽然服务能够最终恢复，但是漫长的选举时间导致的注册长期不可用是不能容忍的
	Eureka则是AP
		Eureka是看明白了这一点，因此在设计时就优先保证可用性。Eureka各个节点都是平等的，几个节点挂掉不会影响正常节点
		的工作，剩余的节点依然可以提供注册和查询服务。而Eureka的客户端在向某个Eureka注册时发现连接失败，则会自动切换
		至其它节点，只要有一台Eureka还在，就能保证注册服务可用（保证可用性），只不过查到的信息可能不是最新的（不保证强一
		致性），除此之外，Eureka还有一种自我保护机制如果在15分钟内超过85%的节点都没有正常的心跳，那么Eureka就认为
		客户端与注册中心出现了网络故障。此时还会出现以下故障
			1.Eureka不在从注册列表中移除因为长时间没收到心跳而应该过期的服务
			2.Eureka仍然能够接受新服务的注册和查询请求，但是不会被同步到其他节点上（即保证当前节点依然可用）
			
			因此 Eureka可以很好的应对因网络故障导致部分节点失去联系的情况，而不会像zookeeper那样是整个注册服务瘫痪
			

理论+实操 同样重要	
面试高大上，面试造飞机，工作拧螺丝	
码神》码农》码牛》码工》码农》码畜》码渣
			
			 
		
			 